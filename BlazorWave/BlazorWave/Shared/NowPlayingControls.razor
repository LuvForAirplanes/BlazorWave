@using BlazorWave.Data.Models;
@using Microsoft.Extensions.DependencyInjection;
@using Microsoft.EntityFrameworkCore;
@inject Services.AlbumsService albumsService
@inject IJSRuntime JSRuntime
@inject Services.NowPlayingPageService nowPlayingService

<div class="flex">
    <div class="media-buttons">
        <button class="ui icon button seek-back">
            <i class="fast backward icon" style="padding-right: 10px !important;" @onclick="PreviousTrack"></i>
        </button>
        <button class="ui icon button play" @onclick="(async => Pause())">
            @if(!nowPlayingService.IsPaused) 
            {
                <i class="pause icon"></i>
            }
            else
            {
                <i class="play icon"></i>
            }
        </button>
        <button class="ui icon button seek-front">
            <i class="fast forward icon" @onclick="NextTrack"></i>
        </button>
    </div>
    <div class="media-information">
        <h3>@(NowPlayingAlbum != null ? NowPlayingAlbum.Tracks[NowPlayingTrack].Title : "")</h3>
        <h4>@(NowPlayingAlbum != null ? NowPlayingAlbum.Title + " (" + NowPlayingAlbum.Artist + ")" : "")</h4>
    </div>
</div>

@if (NowPlayingAlbum != null)
    if(NowPlayingAlbum.Tracks.Count > 0) 
    {
        <div class="music">
            <audio id="player" autoplay src="/api/music?trackId=@NowPlayingAlbum.Tracks[NowPlayingTrack].Id" preload="auto" autobuffer></audio>
        </div>   
    }

@code {
    public Album NowPlayingAlbum { get; set; }

    string albumId { get; set; }
    int nowPlayingTrack { get; set; }

    [Parameter]
    public string AlbumId {
        get => albumId;
        set
        {
            albumId = value;
            UpdateNowPlaying();
        }
    }

    [Parameter]
    public int NowPlayingTrack {
        get => nowPlayingTrack;
        set 
        {
            nowPlayingTrack = value;
        }
    }

    public async void UpdateNowPlaying()
    {
        if(!string.IsNullOrEmpty(albumId))
            NowPlayingAlbum = await albumsService.GetAlbumAsync(AlbumId);

        StateHasChanged();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender) 
    //{
        //var image = await JSRuntime.InvokeAsync<string>("playMusic");

        //StateHasChanged();
    //}

    public async Task Pause() 
    {
        if(nowPlayingService.IsPaused)
        {
            await JSRuntime.InvokeAsync<string>("playMusic");
            nowPlayingService.IsPaused = false;
        }
        else
        {
            await JSRuntime.InvokeAsync<string>("togglePausedMusic");
            nowPlayingService.IsPaused = true;
        }

        StateHasChanged();
    }

    public void NextTrack()
    {
        var next = nowPlayingService.CurrentTrackIndex + 1;

        if(NowPlayingAlbum.Tracks.Count >= next + 1)
            nowPlayingService.CurrentTrackIndex = next;
    } 

    public void PreviousTrack()
    {
        var previous = nowPlayingService.CurrentTrackIndex - 1;

        if(previous != -1)
            nowPlayingService.CurrentTrackIndex = previous;
    }
}
