@using BlazorWave.Data.Models;
@using Microsoft.Extensions.DependencyInjection;
@using Microsoft.EntityFrameworkCore;
@inherits OwningComponentBase<Services.AlbumsService>
@inject IJSRuntime JSRuntime

<div class="flex">
    <div class="media-buttons">
        <button class="ui icon button seek-back">
            <i class="fast backward icon" style="padding-right: 10px !important;"></i>
        </button>
        <button class="ui icon button play" @onclick="(async => Pause())">
            <i class="play icon"></i>
        </button>
        <button class="ui icon button seek-front">
            <i class="fast forward icon"></i>
        </button>
    </div>
    <div class="media-information">
        <h3>@(NowPlayingAlbum != null ? NowPlayingAlbum.Title : "")</h3>
        <h4>@(NowPlayingAlbum != null ? NowPlayingAlbum.Artist : "")</h4>
    </div>
</div>

@if (NowPlayingTrack.HasValue)
{
    <div class="music">
        <audio id="player" autoplay src="/api/music?trackId=@NowPlayingAlbum.Tracks[NowPlayingTrack.Value].Id" preload="auto" autobuffer></audio>
    </div>
}

@code {
    public bool IsPaused { get; set; } = false;

    public Album NowPlayingAlbum { get; set; }
    public int? NowPlayingTrack { get; set; } = null;

    string albumId { get; set; }

    [Parameter]
    public string AlbumId {
        get
        {
            return albumId;
        }
        set
        {
            albumId = value;
            UpdateNowPlaying();
        }
    }

    public async void UpdateNowPlaying()
    {
        if(!string.IsNullOrEmpty(albumId))
            NowPlayingAlbum = await Service.GetAlbumAsync(AlbumId);

        if (NowPlayingAlbum != null)
            if (NowPlayingAlbum.Tracks.Count > 0)
                NowPlayingTrack = 0;

        StateHasChanged();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender) 
    //{
        //var image = await JSRuntime.InvokeAsync<string>("playMusic");

        //StateHasChanged();
    //}

    public async Task Pause() 
    {
        if(IsPaused)
        {
            await JSRuntime.InvokeAsync<string>("playMusic");
            IsPaused = false;
        }
        else
        {
            await JSRuntime.InvokeAsync<string>("togglePausedMusic");
            IsPaused = true;
        }

        StateHasChanged();
    }
}
